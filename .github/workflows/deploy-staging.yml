name: Deploy to Staging

on:
  push:
    branches: [develop]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy'
        required: false
        default: 'latest'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  AWS_REGION: eu-west-1
  EKS_CLUSTER: eidf-crm-staging

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.version }}" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Gateway
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./services/gateway/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/gateway:${{ steps.version.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/gateway:staging
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Organization Service
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./services/organization/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/organization:${{ steps.version.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/organization:staging
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Billing Service
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./services/billing/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/billing:${{ steps.version.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/billing:staging
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Analytics Service
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./services/analytics/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/analytics:${{ steps.version.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/analytics:staging
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER }} --region ${{ env.AWS_REGION }}

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.13.0'

      - name: Deploy with Helm
        run: |
          helm upgrade --install eidf-crm ./helm/eidf-crm \
            -f helm/eidf-crm/values.yaml \
            -f helm/eidf-crm/values-staging.yaml \
            --set image.tag=${{ needs.build-and-push.outputs.version }} \
            --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
            -n eidf-crm \
            --create-namespace \
            --wait \
            --timeout 10m

      - name: Run database migrations
        run: |
          kubectl run migrations-${{ github.run_id }} \
            --image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/gateway:${{ needs.build-and-push.outputs.version }} \
            --rm -it \
            --restart=Never \
            -n eidf-crm \
            -- npm run migrate:deploy

      - name: Verify deployment
        run: |
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/instance=eidf-crm -n eidf-crm --timeout=300s
          kubectl get pods -n eidf-crm

      - name: Run smoke tests
        run: |
          chmod +x ./scripts/smoke-tests.sh
          ./scripts/smoke-tests.sh https://api-staging.eidf-crm.com

      - name: Notify Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Staging deployment ${{ job.status }}
            Version: ${{ needs.build-and-push.outputs.version }}
            Actor: ${{ github.actor }}
            Commit: ${{ github.event.head_commit.message }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  post-deployment:
    needs: [build-and-push, deploy]
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Update deployment status
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment.id,
              state: 'success',
              environment_url: 'https://api-staging.eidf-crm.com',
              description: 'Deployed to staging'
            });

      - name: Create release notes
        run: |
          echo "## Staging Deployment - $(date)" > release-notes.md
          echo "Version: ${{ needs.build-and-push.outputs.version }}" >> release-notes.md
          echo "### Changes:" >> release-notes.md
          git log --oneline -10 >> release-notes.md