// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum for subscription plans
enum SubscriptionPlan {
  FREE
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

// Enum for subscription status
enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  PAST_DUE
}

// Enum for user roles within an organization
enum UserRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

// Organization model - the main tenant
model Organization {
  id              String              @id @default(cuid())
  name            String
  slug            String              @unique
  logo            String?
  website         String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  // Relations
  users           OrganizationUser[]
  subscription    Subscription?
  apiCredentials  ApiCredential[]
  activityLogs    ActivityLog[]
  invitations     Invitation[]
  campaigns       Campaign[]
  emailTemplates  EmailTemplate[]
  emailSegments   EmailSegment[]
  smtpConfiguration SmtpConfiguration?
  ipWarmupSchedule IpWarmupSchedule[]
  unsubscribeList UnsubscribeList[]
  bounceList      BounceList[]
  
  @@index([slug])
}

// User model - Firebase Auth users
model User {
  id              String              @id // Firebase UID
  email           String              @unique
  displayName     String?
  photoURL        String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  // Relations
  organizations   OrganizationUser[]
  activityLogs    ActivityLog[]
  invitationsSent Invitation[]        @relation("InvitedBy")
  
  @@index([email])
}

// Many-to-many relationship between User and Organization
model OrganizationUser {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  role           UserRole     @default(MEMBER)
  joinedAt       DateTime     @default(now())
  
  // Relations
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@unique([userId, organizationId])
  @@index([organizationId])
  @@index([userId])
}

// Subscription model for billing
model Subscription {
  id                String              @id @default(cuid())
  organizationId    String              @unique
  plan              SubscriptionPlan    @default(FREE)
  status            SubscriptionStatus  @default(ACTIVE)
  
  // Stripe/Paddle fields
  customerId        String?             @unique
  subscriptionId    String?             @unique
  
  // Plan limits
  maxUsers          Int                 @default(1)
  maxProducts       Int                 @default(100)
  maxOrders         Int                 @default(1000)
  aiGenerationsPerMonth Int             @default(50)
  
  // Billing cycle
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelledAt        DateTime?
  
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  // Relations
  organization      Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  usageRecords      UsageRecord[]
  
  @@index([status])
  @@index([plan])
}

// API Credentials for external services
model ApiCredential {
  id              String       @id @default(cuid())
  organizationId  String
  service         String       // 'woocommerce', 'gemini', etc.
  name            String       // User-friendly name
  
  // Encrypted credentials
  credentials     Json         // Encrypted JSON with service-specific fields
  
  // WooCommerce specific fields (stored encrypted in credentials)
  // - apiUrl
  // - consumerKey
  // - consumerSecret
  
  isActive        Boolean      @default(true)
  lastUsedAt      DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  // Relations
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@unique([organizationId, service, name])
  @@index([organizationId, service])
}

// Usage tracking for billing and limits
model UsageRecord {
  id               String       @id @default(cuid())
  subscriptionId   String
  metric           String       // 'ai_generation', 'api_call', etc.
  count            Int          @default(1)
  metadata         Json?
  createdAt        DateTime     @default(now())
  
  // Relations
  subscription     Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  
  @@index([subscriptionId, metric, createdAt])
}

// Activity logs for audit trail
model ActivityLog {
  id              String       @id @default(cuid())
  organizationId  String
  userId          String
  action          String       // 'product.created', 'order.updated', etc.
  entityType      String?      // 'product', 'order', 'customer'
  entityId        String?      // External ID from WooCommerce
  metadata        Json?
  ipAddress       String?
  userAgent       String?
  createdAt       DateTime     @default(now())
  
  // Relations
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([organizationId, createdAt])
  @@index([userId, createdAt])
  @@index([entityType, entityId])
}

// Invitations for users to join organizations
model Invitation {
  id              String       @id @default(cuid())
  organizationId  String
  email           String
  role            UserRole     @default(MEMBER)
  token           String       @unique @default(cuid())
  invitedById     String
  expiresAt       DateTime
  acceptedAt      DateTime?
  createdAt       DateTime     @default(now())
  
  // Relations
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  invitedBy       User         @relation("InvitedBy", fields: [invitedById], references: [id])
  
  @@unique([organizationId, email])
  @@index([token])
  @@index([email])
}

// Email Campaign Status
enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  PAUSED
  CANCELLED
  FAILED
}

// Email Recipient Status
enum RecipientStatus {
  PENDING
  SENDING
  SENT
  DELIVERED
  OPENED
  CLICKED
  BOUNCED
  UNSUBSCRIBED
  FAILED
}

// Email Campaign model
model Campaign {
  id                String       @id @default(cuid())
  organizationId    String
  name              String
  subject           String
  body              String       @db.Text
  plainTextBody     String?      @db.Text
  status            CampaignStatus @default(DRAFT)
  
  // Scheduling
  scheduledAt       DateTime?
  startedAt         DateTime?
  completedAt       DateTime?
  
  // Sending configuration
  dailyLimit        Int          @default(100)
  hourlyLimit       Int          @default(20)
  delayBetweenMin   Int          @default(3)   // seconds
  delayBetweenMax   Int          @default(15)  // seconds
  
  // Sender information
  fromEmail         String?
  fromName          String?
  replyToEmail      String?
  
  // Template and segmentation
  templateId        String?
  segmentId         String?
  
  // Statistics
  totalRecipients   Int          @default(0)
  sentCount         Int          @default(0)
  deliveredCount    Int          @default(0)
  openedCount       Int          @default(0)
  clickedCount      Int          @default(0)
  bouncedCount      Int          @default(0)
  unsubscribedCount Int          @default(0)
  spamReportedCount Int          @default(0)
  
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  createdBy         String
  
  // Relations
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  template          EmailTemplate? @relation(fields: [templateId], references: [id])
  segment           EmailSegment? @relation(fields: [segmentId], references: [id])
  recipients        CampaignRecipient[]
  activities        CampaignActivity[]
  
  @@index([organizationId, status])
  @@index([status, scheduledAt])
}

// Campaign Recipients
model CampaignRecipient {
  id              String       @id @default(cuid())
  campaignId      String
  email           String
  firstName       String?
  lastName        String?
  customData      Json?        // Variables for personalization
  
  status          RecipientStatus @default(PENDING)
  sendAttempts    Int          @default(0)
  lastAttemptAt   DateTime?
  
  // Timestamps
  sentAt          DateTime?
  deliveredAt     DateTime?
  openedAt        DateTime?
  firstOpenedAt   DateTime?
  clickedAt       DateTime?
  firstClickedAt  DateTime?
  bouncedAt       DateTime?
  unsubscribedAt  DateTime?
  
  // Email tracking
  messageId       String?      @unique
  trackingId      String?      @unique @default(cuid())
  
  // Error handling
  lastError       String?
  
  createdAt       DateTime     @default(now())
  
  // Relations
  campaign        Campaign     @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  activities      CampaignActivity[]
  
  @@index([campaignId, status])
  @@index([email])
  @@index([trackingId])
}

// Campaign Activity Tracking
model CampaignActivity {
  id              String       @id @default(cuid())
  campaignId      String
  recipientId     String
  action          String       // 'sent', 'delivered', 'opened', 'clicked', 'bounced', 'unsubscribed', 'spam_reported'
  timestamp       DateTime     @default(now())
  
  // Optional metadata
  userAgent       String?
  ipAddress       String?
  linkUrl         String?
  
  // Relations
  campaign        Campaign     @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  recipient       CampaignRecipient @relation(fields: [recipientId], references: [id], onDelete: Cascade)
  
  @@index([campaignId, action, timestamp])
  @@index([recipientId, action])
}

// Email Templates
model EmailTemplate {
  id              String       @id @default(cuid())
  organizationId  String
  name            String
  subject         String
  body            String       @db.Text
  plainTextBody   String?      @db.Text
  category        String       @default("custom") // 'promotional', 'transactional', 'newsletter', 'welcome', 'custom'
  variables       Json?        // Available variables for personalization
  thumbnailUrl    String?
  
  isActive        Boolean      @default(true)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  createdBy       String
  
  // Relations
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  campaigns       Campaign[]
  
  @@index([organizationId, category])
}

// Email Segments
model EmailSegment {
  id              String       @id @default(cuid())
  organizationId  String
  name            String
  description     String?
  criteria        Json         // Segment criteria as JSON
  estimatedSize   Int          @default(0)
  lastCalculated  DateTime?
  
  isActive        Boolean      @default(true)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  createdBy       String
  
  // Relations
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  campaigns       Campaign[]
  
  @@index([organizationId])
}

// SMTP Configuration per organization
model SmtpConfiguration {
  id              String       @id @default(cuid())
  organizationId  String       @unique
  
  // SMTP settings
  host            String       @default("localhost")
  port            Int          @default(25)
  secure          Boolean      @default(false)
  username        String?
  password        String?      // Encrypted
  
  // Sender information
  fromEmail       String
  fromName        String
  replyToEmail    String?
  
  // Rate limiting
  maxPerDay       Int          @default(500)
  maxPerHour      Int          @default(50)
  minDelaySeconds Int          @default(3)
  maxDelaySeconds Int          @default(15)
  
  // Features
  trackingEnabled Boolean      @default(true)
  dedicatedIp     String?      // IP dédiée pour warm-up
  
  isActive        Boolean      @default(true)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  // Relations
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@index([organizationId])
}

// Warmup Status and Growth Pattern
enum WarmupStatus {
  SCHEDULED
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum WarmupGrowthPattern {
  linear
  exponential
  conservative
}

// IP Warmup Schedule
model IpWarmupSchedule {
  id               String                @id @default(cuid())
  organizationId   String
  ipAddress        String
  startDate        DateTime
  endDate          DateTime
  totalDuration    Int                   // En jours
  maxDailyVolume   Int
  growthPattern    WarmupGrowthPattern   @default(conservative)
  status           WarmupStatus          @default(SCHEDULED)
  currentDay       Int                   @default(0)
  emailsSentToday  Int                   @default(0)
  totalEmailsSent  Int                   @default(0)
  dailyTargets     String?               // JSON string of daily targets
  lastEmailSentAt  DateTime?
  completedAt      DateTime?
  
  // Provider-specific counters
  gmailSentToday   Int                   @default(0)
  outlookSentToday Int                   @default(0)
  yahooSentToday   Int                   @default(0)
  
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt

  // Relations
  organization     Organization          @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, ipAddress])
  @@index([organizationId, status])
}

// Unsubscribe List
model UnsubscribeList {
  id              String       @id @default(cuid())
  organizationId  String?      // NULL for global unsubscribes
  email           String
  reason          String?
  source          String?      // 'campaign', 'manual', 'bounce'
  campaignId      String?
  
  createdAt       DateTime     @default(now())
  
  // Relations
  organization    Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@unique([organizationId, email])
  @@index([email])
}

// Bounce List for reputation management
model BounceList {
  id              String       @id @default(cuid())
  organizationId  String?      // NULL for global bounces
  email           String
  bounceType      String       // 'hard', 'soft', 'complaint'
  bounceReason    String?
  bounceCount     Int          @default(1)
  
  firstBounceAt   DateTime     @default(now())
  lastBounceAt    DateTime     @default(now())
  
  // Relations
  organization    Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@unique([organizationId, email])
  @@index([email, bounceType])
}
