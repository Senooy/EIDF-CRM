#!/bin/bash

# EIDF CRM - G√©n√©rateur de secrets s√©curis√©s
# G√©n√®re les cl√©s et mots de passe n√©cessaires pour la production

set -euo pipefail

# Couleurs
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Fonction pour g√©n√©rer un mot de passe al√©atoire
generate_password() {
    local length=${1:-32}
    openssl rand -base64 32 | tr -d "=+/" | cut -c1-${length}
}

# Fonction pour g√©n√©rer une cl√© hexad√©cimale
generate_hex_key() {
    local length=${1:-32}
    openssl rand -hex ${length}
}

# Fonction principale
main() {
    log_info "üîê G√©n√©ration des secrets pour EIDF CRM"
    echo ""
    
    log_info "üìã Copiez ces valeurs dans votre fichier .env.production:"
    echo ""
    
    # Mot de passe PostgreSQL
    POSTGRES_PASSWORD=$(generate_password 24)
    echo "POSTGRES_PASSWORD=${POSTGRES_PASSWORD}"
    
    # Mot de passe Redis
    REDIS_PASSWORD=$(generate_password 24)
    echo "REDIS_PASSWORD=${REDIS_PASSWORD}"
    
    # Cl√© de chiffrement
    ENCRYPTION_KEY=$(generate_hex_key 32)
    echo "ENCRYPTION_KEY=${ENCRYPTION_KEY}"
    
    echo ""
    log_success "‚úÖ Secrets g√©n√©r√©s avec succ√®s!"
    echo ""
    
    log_warning "‚ö†Ô∏è IMPORTANT:"
    echo "1. Sauvegardez ces valeurs de mani√®re s√©curis√©e"
    echo "2. Ne les partagez jamais publiquement"
    echo "3. Utilisez un gestionnaire de mots de passe"
    echo "4. Changez ces valeurs si elles sont compromises"
    echo ""
    
    log_info "üìù Pour Firebase Service Account:"
    echo "1. Allez sur https://console.firebase.google.com/"
    echo "2. S√©lectionnez votre projet"
    echo "3. Project Settings > Service Accounts"
    echo "4. Generate new private key"
    echo "5. Encodez le fichier JSON en base64:"
    echo "   base64 -w 0 service-account.json"
    echo "6. Copiez le r√©sultat dans FIREBASE_SERVICE_ACCOUNT"
    echo ""
    
    log_info "üîí Pour SSL/TLS:"
    echo "Apr√®s le d√©ploiement, obtenez un certificat avec:"
    echo "sudo certbot --nginx -d votre-domaine.com"
}

# V√©rification des d√©pendances
if ! command -v openssl &> /dev/null; then
    echo "Erreur: OpenSSL n'est pas install√©"
    exit 1
fi

# Ex√©cution
main